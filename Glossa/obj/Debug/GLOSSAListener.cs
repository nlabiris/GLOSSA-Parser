//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Sonic\Documents\Visual Studio 2013\Projects\Glossa\Glossa\GLOSSA.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Glossa {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GLOSSAParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface IGLOSSAListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtlist</c>
	/// labeled alternative in <see cref="GLOSSAParser.statementlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStmtlist([NotNull] GLOSSAParser.StmtlistContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtlist</c>
	/// labeled alternative in <see cref="GLOSSAParser.statementlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStmtlist([NotNull] GLOSSAParser.StmtlistContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>bool_true</c>
	/// labeled alternative in <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool_true([NotNull] GLOSSAParser.Bool_trueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bool_true</c>
	/// labeled alternative in <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool_true([NotNull] GLOSSAParser.Bool_trueContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>bool_false</c>
	/// labeled alternative in <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool_false([NotNull] GLOSSAParser.Bool_falseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bool_false</c>
	/// labeled alternative in <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool_false([NotNull] GLOSSAParser.Bool_falseContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>switchctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.switchcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchctrl([NotNull] GLOSSAParser.SwitchctrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>switchctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.switchcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchctrl([NotNull] GLOSSAParser.SwitchctrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>programstart</c>
	/// labeled alternative in <see cref="GLOSSAParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgramstart([NotNull] GLOSSAParser.ProgramstartContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>programstart</c>
	/// labeled alternative in <see cref="GLOSSAParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgramstart([NotNull] GLOSSAParser.ProgramstartContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>casectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.casescontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCasectrl([NotNull] GLOSSAParser.CasectrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>casectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.casescontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCasectrl([NotNull] GLOSSAParser.CasectrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>type_pragmatikes</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_pragmatikes([NotNull] GLOSSAParser.Type_pragmatikesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>type_pragmatikes</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_pragmatikes([NotNull] GLOSSAParser.Type_pragmatikesContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>type_xaraktires</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_xaraktires([NotNull] GLOSSAParser.Type_xaraktiresContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>type_xaraktires</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_xaraktires([NotNull] GLOSSAParser.Type_xaraktiresContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>type_akeraies</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_akeraies([NotNull] GLOSSAParser.Type_akeraiesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>type_akeraies</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_akeraies([NotNull] GLOSSAParser.Type_akeraiesContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>type_logikes</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType_logikes([NotNull] GLOSSAParser.Type_logikesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>type_logikes</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType_logikes([NotNull] GLOSSAParser.Type_logikesContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>whilectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.whileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhilectrl([NotNull] GLOSSAParser.WhilectrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whilectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.whileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhilectrl([NotNull] GLOSSAParser.WhilectrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>filestart</c>
	/// labeled alternative in <see cref="GLOSSAParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFilestart([NotNull] GLOSSAParser.FilestartContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>filestart</c>
	/// labeled alternative in <see cref="GLOSSAParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFilestart([NotNull] GLOSSAParser.FilestartContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>elsectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElsectrl([NotNull] GLOSSAParser.ElsectrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>elsectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElsectrl([NotNull] GLOSSAParser.ElsectrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>elseifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.elseif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseifctrl([NotNull] GLOSSAParser.ElseifctrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>elseifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.elseif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseifctrl([NotNull] GLOSSAParser.ElseifctrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stat_ifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_ifctrl([NotNull] GLOSSAParser.Stat_ifctrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_ifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_ifctrl([NotNull] GLOSSAParser.Stat_ifctrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stat_dowhile</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_dowhile([NotNull] GLOSSAParser.Stat_dowhileContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_dowhile</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_dowhile([NotNull] GLOSSAParser.Stat_dowhileContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stat_ioexpr</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_ioexpr([NotNull] GLOSSAParser.Stat_ioexprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_ioexpr</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_ioexpr([NotNull] GLOSSAParser.Stat_ioexprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stat_assignment</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_assignment([NotNull] GLOSSAParser.Stat_assignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_assignment</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_assignment([NotNull] GLOSSAParser.Stat_assignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stat_while</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_while([NotNull] GLOSSAParser.Stat_whileContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_while</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_while([NotNull] GLOSSAParser.Stat_whileContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stat_switch</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_switch([NotNull] GLOSSAParser.Stat_switchContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_switch</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_switch([NotNull] GLOSSAParser.Stat_switchContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>stat_expr</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_expr([NotNull] GLOSSAParser.Stat_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_expr</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_expr([NotNull] GLOSSAParser.Stat_exprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>dowhilectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.dowhileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDowhilectrl([NotNull] GLOSSAParser.DowhilectrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dowhilectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.dowhileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDowhilectrl([NotNull] GLOSSAParser.DowhilectrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>keyword_kalese</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword_kalese([NotNull] GLOSSAParser.Keyword_kaleseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>keyword_kalese</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword_kalese([NotNull] GLOSSAParser.Keyword_kaleseContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>keyword_diabase</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword_diabase([NotNull] GLOSSAParser.Keyword_diabaseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>keyword_diabase</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword_diabase([NotNull] GLOSSAParser.Keyword_diabaseContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>keyword_ektipose</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword_ektipose([NotNull] GLOSSAParser.Keyword_ektiposeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>keyword_ektipose</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword_ektipose([NotNull] GLOSSAParser.Keyword_ektiposeContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>keyword_grapse</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword_grapse([NotNull] GLOSSAParser.Keyword_grapseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>keyword_grapse</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword_grapse([NotNull] GLOSSAParser.Keyword_grapseContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vardecl_alt2</c>
	/// labeled alternative in <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVardecl_alt2([NotNull] GLOSSAParser.Vardecl_alt2Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vardecl_alt2</c>
	/// labeled alternative in <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVardecl_alt2([NotNull] GLOSSAParser.Vardecl_alt2Context context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vardecl_alt1</c>
	/// labeled alternative in <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVardecl_alt1([NotNull] GLOSSAParser.Vardecl_alt1Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vardecl_alt1</c>
	/// labeled alternative in <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVardecl_alt1([NotNull] GLOSSAParser.Vardecl_alt1Context context);

	/// <summary>
	/// Enter a parse tree produced by the <c>procdef</c>
	/// labeled alternative in <see cref="GLOSSAParser.proceduredefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProcdef([NotNull] GLOSSAParser.ProcdefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>procdef</c>
	/// labeled alternative in <see cref="GLOSSAParser.proceduredefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProcdef([NotNull] GLOSSAParser.ProcdefContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>ifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.ifcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfctrl([NotNull] GLOSSAParser.IfctrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.ifcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfctrl([NotNull] GLOSSAParser.IfctrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_compare</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_compare([NotNull] GLOSSAParser.Expr_compareContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_compare</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_compare([NotNull] GLOSSAParser.Expr_compareContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_muldiv</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_muldiv([NotNull] GLOSSAParser.Expr_muldivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_muldiv</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_muldiv([NotNull] GLOSSAParser.Expr_muldivContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_or</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_or([NotNull] GLOSSAParser.Expr_orContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_or</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_or([NotNull] GLOSSAParser.Expr_orContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_power</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_power([NotNull] GLOSSAParser.Expr_powerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_power</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_power([NotNull] GLOSSAParser.Expr_powerContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_and</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_and([NotNull] GLOSSAParser.Expr_andContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_and</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_and([NotNull] GLOSSAParser.Expr_andContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_paren</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_paren([NotNull] GLOSSAParser.Expr_parenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_paren</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_paren([NotNull] GLOSSAParser.Expr_parenContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_funcproccall</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_funcproccall([NotNull] GLOSSAParser.Expr_funcproccallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_funcproccall</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_funcproccall([NotNull] GLOSSAParser.Expr_funcproccallContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_expressionprimitives</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_expressionprimitives([NotNull] GLOSSAParser.Expr_expressionprimitivesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_expressionprimitives</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_expressionprimitives([NotNull] GLOSSAParser.Expr_expressionprimitivesContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_unary</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_unary([NotNull] GLOSSAParser.Expr_unaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_unary</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_unary([NotNull] GLOSSAParser.Expr_unaryContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expr_plusminus</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_plusminus([NotNull] GLOSSAParser.Expr_plusminusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_plusminus</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_plusminus([NotNull] GLOSSAParser.Expr_plusminusContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>otherwisectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.otherwisecontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOtherwisectrl([NotNull] GLOSSAParser.OtherwisectrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>otherwisectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.otherwisecontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOtherwisectrl([NotNull] GLOSSAParser.OtherwisectrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="GLOSSAParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssign([NotNull] GLOSSAParser.AssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="GLOSSAParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssign([NotNull] GLOSSAParser.AssignContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>constdecl</c>
	/// labeled alternative in <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstdecl([NotNull] GLOSSAParser.ConstdeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constdecl</c>
	/// labeled alternative in <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstdecl([NotNull] GLOSSAParser.ConstdeclContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>vardecl</c>
	/// labeled alternative in <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVardecl([NotNull] GLOSSAParser.VardeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>vardecl</c>
	/// labeled alternative in <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVardecl([NotNull] GLOSSAParser.VardeclContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>constdecl_alt</c>
	/// labeled alternative in <see cref="GLOSSAParser.constantdeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstdecl_alt([NotNull] GLOSSAParser.Constdecl_altContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constdecl_alt</c>
	/// labeled alternative in <see cref="GLOSSAParser.constantdeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstdecl_alt([NotNull] GLOSSAParser.Constdecl_altContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>funcdef</c>
	/// labeled alternative in <see cref="GLOSSAParser.functiondefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncdef([NotNull] GLOSSAParser.FuncdefContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>funcdef</c>
	/// labeled alternative in <see cref="GLOSSAParser.functiondefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncdef([NotNull] GLOSSAParser.FuncdefContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expressionprimitives_string</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionprimitives_string([NotNull] GLOSSAParser.Expressionprimitives_stringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionprimitives_string</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionprimitives_string([NotNull] GLOSSAParser.Expressionprimitives_stringContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expressionprimitives_int</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionprimitives_int([NotNull] GLOSSAParser.Expressionprimitives_intContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionprimitives_int</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionprimitives_int([NotNull] GLOSSAParser.Expressionprimitives_intContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expressionprimitives_dec</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionprimitives_dec([NotNull] GLOSSAParser.Expressionprimitives_decContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionprimitives_dec</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionprimitives_dec([NotNull] GLOSSAParser.Expressionprimitives_decContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>expressionprimitives_identifier</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionprimitives_identifier([NotNull] GLOSSAParser.Expressionprimitives_identifierContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionprimitives_identifier</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionprimitives_identifier([NotNull] GLOSSAParser.Expressionprimitives_identifierContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>forctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.forloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForctrl([NotNull] GLOSSAParser.ForctrlContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>forctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.forloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForctrl([NotNull] GLOSSAParser.ForctrlContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>funargs</c>
	/// labeled alternative in <see cref="GLOSSAParser.functionarguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunargs([NotNull] GLOSSAParser.FunargsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>funargs</c>
	/// labeled alternative in <see cref="GLOSSAParser.functionarguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunargs([NotNull] GLOSSAParser.FunargsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFile([NotNull] GLOSSAParser.FileContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFile([NotNull] GLOSSAParser.FileContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] GLOSSAParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] GLOSSAParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.functiondefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctiondefinition([NotNull] GLOSSAParser.FunctiondefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.functiondefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctiondefinition([NotNull] GLOSSAParser.FunctiondefinitionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.proceduredefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProceduredefinition([NotNull] GLOSSAParser.ProceduredefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.proceduredefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProceduredefinition([NotNull] GLOSSAParser.ProceduredefinitionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.statementlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementlist([NotNull] GLOSSAParser.StatementlistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.statementlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementlist([NotNull] GLOSSAParser.StatementlistContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] GLOSSAParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] GLOSSAParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclarations([NotNull] GLOSSAParser.DeclarationsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclarations([NotNull] GLOSSAParser.DeclarationsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariabledeclarations([NotNull] GLOSSAParser.VariabledeclarationsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariabledeclarations([NotNull] GLOSSAParser.VariabledeclarationsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.constantdeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantdeclarations([NotNull] GLOSSAParser.ConstantdeclarationsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.constantdeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantdeclarations([NotNull] GLOSSAParser.ConstantdeclarationsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.ifcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfcontrol([NotNull] GLOSSAParser.IfcontrolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.ifcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfcontrol([NotNull] GLOSSAParser.IfcontrolContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.elseif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseif([NotNull] GLOSSAParser.ElseifContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.elseif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseif([NotNull] GLOSSAParser.ElseifContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElse([NotNull] GLOSSAParser.ElseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElse([NotNull] GLOSSAParser.ElseContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.dowhileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDowhileloop([NotNull] GLOSSAParser.DowhileloopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.dowhileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDowhileloop([NotNull] GLOSSAParser.DowhileloopContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.whileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileloop([NotNull] GLOSSAParser.WhileloopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.whileloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileloop([NotNull] GLOSSAParser.WhileloopContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.forloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForloop([NotNull] GLOSSAParser.ForloopContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.forloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForloop([NotNull] GLOSSAParser.ForloopContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.switchcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitchcontrol([NotNull] GLOSSAParser.SwitchcontrolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.switchcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitchcontrol([NotNull] GLOSSAParser.SwitchcontrolContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.casescontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCasescontrol([NotNull] GLOSSAParser.CasescontrolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.casescontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCasescontrol([NotNull] GLOSSAParser.CasescontrolContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.otherwisecontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOtherwisecontrol([NotNull] GLOSSAParser.OtherwisecontrolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.otherwisecontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOtherwisecontrol([NotNull] GLOSSAParser.OtherwisecontrolContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.functionarguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionarguments([NotNull] GLOSSAParser.FunctionargumentsContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.functionarguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionarguments([NotNull] GLOSSAParser.FunctionargumentsContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] GLOSSAParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] GLOSSAParser.AssignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionprimitives([NotNull] GLOSSAParser.ExpressionprimitivesContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionprimitives([NotNull] GLOSSAParser.ExpressionprimitivesContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] GLOSSAParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] GLOSSAParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] GLOSSAParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] GLOSSAParser.TypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] GLOSSAParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] GLOSSAParser.FunctionTypeContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterKeyword([NotNull] GLOSSAParser.KeywordContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitKeyword([NotNull] GLOSSAParser.KeywordContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool([NotNull] GLOSSAParser.BoolContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool([NotNull] GLOSSAParser.BoolContext context);
}
} // namespace Glossa
