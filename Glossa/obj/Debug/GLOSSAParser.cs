//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Sonic\Documents\Visual Studio 2013\Projects\Glossa\Glossa\GLOSSA.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Glossa {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class GLOSSAParser : Parser {
	public const int
		T__0=1, PROGRAMMA=2, ARXH=3, TELOS_PROGRAMMATOS=4, SYNARTHSH=5, TELOS_SYNARTHSHS=6, 
		DIADIKASIA=7, TELOS_DIADIKASIAS=8, METABLHTES=9, STATHERES=10, AN=11, 
		TOTE=12, TELOS_AN=13, ALLIOS_AN=14, ALLIOS=15, AKERAIES=16, PRAGMATIKES=17, 
		XARAKTHRES=18, LOGIKES=19, GRAPSE=20, EKTIPOSE=21, DIABASE=22, KALESE=23, 
		TRUE=24, FALSE=25, INTEGER=26, DECIMAL=27, STRING=28, IDENTIFIER=29, EQUALS=30, 
		NOTEQUALS=31, GT=32, GE=33, LT=34, LE=35, PLUS=36, MINUS=37, MUL=38, DIV=39, 
		POWER=40, SEMICOLON=41, COMMA=42, ASSIGNMENT=43, LPAREN=44, RPAREN=45, 
		LBRACKET=46, RBRACKET=47, LANCHOR=48, RANCHOR=49, COMMENTS=50, WS=51;
	public const int
		RULE_file = 0, RULE_program = 1, RULE_statementlist = 2, RULE_statement = 3, 
		RULE_declarations = 4, RULE_functiondefinition = 5, RULE_proceduredefinition = 6, 
		RULE_variabledeclarations = 7, RULE_constantdeclarations = 8, RULE_ifcontrol = 9, 
		RULE_elseif = 10, RULE_else = 11, RULE_functionarguments = 12, RULE_assignment = 13, 
		RULE_expression = 14, RULE_expressionprimitives = 15, RULE_type = 16, 
		RULE_keyword = 17, RULE_bool = 18;
	public static readonly string[] ruleNames = {
		"file", "program", "statementlist", "statement", "declarations", "functiondefinition", 
		"proceduredefinition", "variabledeclarations", "constantdeclarations", 
		"ifcontrol", "elseif", "else", "functionarguments", "assignment", "expression", 
		"expressionprimitives", "type", "keyword", "bool"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'пяоцяалла'", "'аявг'", "'текос_пяоцяаллатос'", "'сумаятгсг'", 
		"'текос_сумаятгсгс'", "'диадийасиа'", "'текос_диадийасиас'", "'летабкгтес'", 
		"'стахеяес'", "'ам'", "'тоте'", "'текос_ам'", "'аккиыс_ам'", "'аккиыс'", 
		"'айеяаиес'", "'пяацлатийес'", "'ваяайтгяес'", "'коцийес'", "'цяаье'", 
		"'ейтупысе'", "'диабасе'", "'йакесе'", "'акгхгс'", "'ьеудгс'", null, null, 
		null, null, "'='", "'<>'", "'>'", "'>='", "'<'", "'<='", "'+'", "'-'", 
		"'*'", "'/'", "'^'", "';'", "','", "'<-'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "PROGRAMMA", "ARXH", "TELOS_PROGRAMMATOS", "SYNARTHSH", "TELOS_SYNARTHSHS", 
		"DIADIKASIA", "TELOS_DIADIKASIAS", "METABLHTES", "STATHERES", "AN", "TOTE", 
		"TELOS_AN", "ALLIOS_AN", "ALLIOS", "AKERAIES", "PRAGMATIKES", "XARAKTHRES", 
		"LOGIKES", "GRAPSE", "EKTIPOSE", "DIABASE", "KALESE", "TRUE", "FALSE", 
		"INTEGER", "DECIMAL", "STRING", "IDENTIFIER", "EQUALS", "NOTEQUALS", "GT", 
		"GE", "LT", "LE", "PLUS", "MINUS", "MUL", "DIV", "POWER", "SEMICOLON", 
		"COMMA", "ASSIGNMENT", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "LANCHOR", 
		"RANCHOR", "COMMENTS", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GLOSSA.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GLOSSAParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
	 
		public FileContext() { }
		public virtual void CopyFrom(FileContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FilestartContext : FileContext {
		public IReadOnlyList<FunctiondefinitionContext> functiondefinition() {
			return GetRuleContexts<FunctiondefinitionContext>();
		}
		public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public FunctiondefinitionContext functiondefinition(int i) {
			return GetRuleContext<FunctiondefinitionContext>(i);
		}
		public IReadOnlyList<ProceduredefinitionContext> proceduredefinition() {
			return GetRuleContexts<ProceduredefinitionContext>();
		}
		public ProceduredefinitionContext proceduredefinition(int i) {
			return GetRuleContext<ProceduredefinitionContext>(i);
		}
		public FilestartContext(FileContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterFilestart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitFilestart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilestart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			_localctx = new FilestartContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; program();
			State = 43;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SYNARTHSH || _la==DIADIKASIA) {
				{
				State = 41;
				switch (_input.La(1)) {
				case SYNARTHSH:
					{
					State = 39; functiondefinition();
					}
					break;
				case DIADIKASIA:
					{
					State = 40; proceduredefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramstartContext : ProgramContext {
		public DeclarationsContext declarations(int i) {
			return GetRuleContext<DeclarationsContext>(i);
		}
		public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public ITerminalNode TELOS_PROGRAMMATOS() { return GetToken(GLOSSAParser.TELOS_PROGRAMMATOS, 0); }
		public IReadOnlyList<DeclarationsContext> declarations() {
			return GetRuleContexts<DeclarationsContext>();
		}
		public ITerminalNode ARXH() { return GetToken(GLOSSAParser.ARXH, 0); }
		public ITerminalNode PROGRAMMA() { return GetToken(GLOSSAParser.PROGRAMMA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(GLOSSAParser.IDENTIFIER, 0); }
		public ProgramstartContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterProgramstart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitProgramstart(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramstart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			_localctx = new ProgramstartContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(PROGRAMMA);
			State = 47; Match(IDENTIFIER);
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==METABLHTES || _la==STATHERES) {
				{
				{
				State = 48; declarations();
				}
				}
				State = 53;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 54; Match(ARXH);
			State = 55; statementlist();
			State = 56; Match(TELOS_PROGRAMMATOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementlistContext : ParserRuleContext {
		public StatementlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementlist; } }
	 
		public StatementlistContext() { }
		public virtual void CopyFrom(StatementlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtlistContext : StatementlistContext {
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StmtlistContext(StatementlistContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterStmtlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitStmtlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementlistContext statementlist() {
		StatementlistContext _localctx = new StatementlistContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statementlist);
		int _la;
		try {
			_localctx = new StmtlistContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AN) | (1L << GRAPSE) | (1L << EKTIPOSE) | (1L << DIABASE) | (1L << KALESE) | (1L << INTEGER) | (1L << DECIMAL) | (1L << STRING) | (1L << IDENTIFIER) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 58; statement();
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Stat_ifctrlContext : StatementContext {
		public IfcontrolContext ifcontrol() {
			return GetRuleContext<IfcontrolContext>(0);
		}
		public Stat_ifctrlContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterStat_ifctrl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitStat_ifctrl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_ifctrl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stat_ioexprContext : StatementContext {
		public ITerminalNode COMMA() { return GetToken(GLOSSAParser.COMMA, 0); }
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public Stat_ioexprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterStat_ioexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitStat_ioexpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_ioexpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stat_assignmentContext : StatementContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public Stat_assignmentContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterStat_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitStat_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stat_exprContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Stat_exprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterStat_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitStat_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_statement);
		int _la;
		try {
			State = 73;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				_localctx = new Stat_exprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; expression(0);
				}
				break;

			case 2:
				_localctx = new Stat_assignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; assignment();
				}
				break;

			case 3:
				_localctx = new Stat_ioexprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 66; keyword();
				State = 67; expression(0);
				State = 70;
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 68; Match(COMMA);
					State = 69; expression(0);
					}
				}

				}
				break;

			case 4:
				_localctx = new Stat_ifctrlContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 72; ifcontrol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
	 
		public DeclarationsContext() { }
		public virtual void CopyFrom(DeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstdeclContext : DeclarationsContext {
		public ConstantdeclarationsContext constantdeclarations() {
			return GetRuleContext<ConstantdeclarationsContext>(0);
		}
		public ConstdeclContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterConstdecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitConstdecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstdecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VardeclContext : DeclarationsContext {
		public VariabledeclarationsContext variabledeclarations() {
			return GetRuleContext<VariabledeclarationsContext>(0);
		}
		public VardeclContext(DeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterVardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitVardecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_declarations);
		try {
			State = 77;
			switch (_input.La(1)) {
			case METABLHTES:
				_localctx = new VardeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; variabledeclarations();
				}
				break;
			case STATHERES:
				_localctx = new ConstdeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; constantdeclarations();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefinitionContext : ParserRuleContext {
		public FunctiondefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondefinition; } }
	 
		public FunctiondefinitionContext() { }
		public virtual void CopyFrom(FunctiondefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Funcdef1Context : FunctiondefinitionContext {
		public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public ITerminalNode SYNARTHSH() { return GetToken(GLOSSAParser.SYNARTHSH, 0); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLOSSAParser.IDENTIFIER, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(GLOSSAParser.IDENTIFIER); }
		public ITerminalNode TELOS_SYNARTHSHS() { return GetToken(GLOSSAParser.TELOS_SYNARTHSHS, 0); }
		public Funcdef1Context(FunctiondefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterFuncdef1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitFuncdef1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Funcdef2Context : FunctiondefinitionContext {
		public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public ITerminalNode SYNARTHSH() { return GetToken(GLOSSAParser.SYNARTHSH, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(GLOSSAParser.IDENTIFIER, 0); }
		public ITerminalNode TELOS_SYNARTHSHS() { return GetToken(GLOSSAParser.TELOS_SYNARTHSHS, 0); }
		public Funcdef2Context(FunctiondefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterFuncdef2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitFuncdef2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefinitionContext functiondefinition() {
		FunctiondefinitionContext _localctx = new FunctiondefinitionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functiondefinition);
		int _la;
		try {
			State = 105;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				_localctx = new Funcdef1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; Match(SYNARTHSH);
				State = 80; Match(IDENTIFIER);
				State = 91;
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 81; Match(LPAREN);
					State = 82; Match(IDENTIFIER);
					State = 87;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 83; Match(COMMA);
						State = 84; Match(IDENTIFIER);
						}
						}
						State = 89;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 90; Match(RPAREN);
					}
				}

				State = 93; Match(T__0);
				State = 94; type();
				State = 95; statementlist();
				State = 96; Match(TELOS_SYNARTHSHS);
				}
				break;

			case 2:
				_localctx = new Funcdef2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 98; Match(SYNARTHSH);
				State = 99; Match(IDENTIFIER);
				State = 100; Match(T__0);
				State = 101; type();
				State = 102; statementlist();
				State = 103; Match(TELOS_SYNARTHSHS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProceduredefinitionContext : ParserRuleContext {
		public ProceduredefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proceduredefinition; } }
	 
		public ProceduredefinitionContext() { }
		public virtual void CopyFrom(ProceduredefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Procdef1Context : ProceduredefinitionContext {
		public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLOSSAParser.IDENTIFIER, i);
		}
		public ITerminalNode TELOS_DIADIKASIAS() { return GetToken(GLOSSAParser.TELOS_DIADIKASIAS, 0); }
		public ITerminalNode DIADIKASIA() { return GetToken(GLOSSAParser.DIADIKASIA, 0); }
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(GLOSSAParser.IDENTIFIER); }
		public Procdef1Context(ProceduredefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterProcdef1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitProcdef1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcdef1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Procdef2Context : ProceduredefinitionContext {
		public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public ITerminalNode TELOS_DIADIKASIAS() { return GetToken(GLOSSAParser.TELOS_DIADIKASIAS, 0); }
		public ITerminalNode DIADIKASIA() { return GetToken(GLOSSAParser.DIADIKASIA, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(GLOSSAParser.IDENTIFIER, 0); }
		public Procdef2Context(ProceduredefinitionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterProcdef2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitProcdef2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcdef2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProceduredefinitionContext proceduredefinition() {
		ProceduredefinitionContext _localctx = new ProceduredefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_proceduredefinition);
		int _la;
		try {
			State = 129;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				_localctx = new Procdef1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(DIADIKASIA);
				State = 108; Match(IDENTIFIER);
				State = 119;
				switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					State = 109; Match(LPAREN);
					State = 110; Match(IDENTIFIER);
					State = 115;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 111; Match(COMMA);
						State = 112; Match(IDENTIFIER);
						}
						}
						State = 117;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 118; Match(RPAREN);
					}
					break;
				}
				State = 121; statementlist();
				State = 122; Match(TELOS_DIADIKASIAS);
				}
				break;

			case 2:
				_localctx = new Procdef2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; Match(DIADIKASIA);
				State = 125; Match(IDENTIFIER);
				State = 126; statementlist();
				State = 127; Match(TELOS_DIADIKASIAS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariabledeclarationsContext : ParserRuleContext {
		public VariabledeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variabledeclarations; } }
	 
		public VariabledeclarationsContext() { }
		public virtual void CopyFrom(VariabledeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Vardecl_alt2Context : VariabledeclarationsContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLOSSAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<TypeContext> type() {
			return GetRuleContexts<TypeContext>();
		}
		public ITerminalNode METABLHTES() { return GetToken(GLOSSAParser.METABLHTES, 0); }
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(GLOSSAParser.IDENTIFIER); }
		public Vardecl_alt2Context(VariabledeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterVardecl_alt2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitVardecl_alt2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl_alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Vardecl_alt1Context : VariabledeclarationsContext {
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLOSSAParser.IDENTIFIER, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode METABLHTES() { return GetToken(GLOSSAParser.METABLHTES, 0); }
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(GLOSSAParser.IDENTIFIER); }
		public Vardecl_alt1Context(VariabledeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterVardecl_alt1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitVardecl_alt1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVardecl_alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariabledeclarationsContext variabledeclarations() {
		VariabledeclarationsContext _localctx = new VariabledeclarationsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_variabledeclarations);
		int _la;
		try {
			State = 151;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				_localctx = new Vardecl_alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(METABLHTES);
				State = 132; type();
				State = 133; Match(T__0);
				State = 134; Match(IDENTIFIER);
				State = 139;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 135; Match(COMMA);
					State = 136; Match(IDENTIFIER);
					}
					}
					State = 141;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				_localctx = new Vardecl_alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142; Match(METABLHTES);
				State = 147;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 143; type();
					State = 144; Match(T__0);
					State = 145; Match(IDENTIFIER);
					}
					}
					State = 149;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AKERAIES) | (1L << PRAGMATIKES) | (1L << XARAKTHRES) | (1L << LOGIKES))) != 0) );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantdeclarationsContext : ParserRuleContext {
		public ConstantdeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantdeclarations; } }
	 
		public ConstantdeclarationsContext() { }
		public virtual void CopyFrom(ConstantdeclarationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Constdecl_alt1Context : ConstantdeclarationsContext {
		public IReadOnlyList<ITerminalNode> EQUALS() { return GetTokens(GLOSSAParser.EQUALS); }
		public ITerminalNode STATHERES() { return GetToken(GLOSSAParser.STATHERES, 0); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLOSSAParser.IDENTIFIER, i);
		}
		public ITerminalNode EQUALS(int i) {
			return GetToken(GLOSSAParser.EQUALS, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(GLOSSAParser.IDENTIFIER); }
		public IReadOnlyList<ExpressionprimitivesContext> expressionprimitives() {
			return GetRuleContexts<ExpressionprimitivesContext>();
		}
		public ExpressionprimitivesContext expressionprimitives(int i) {
			return GetRuleContext<ExpressionprimitivesContext>(i);
		}
		public Constdecl_alt1Context(ConstantdeclarationsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterConstdecl_alt1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitConstdecl_alt1(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstdecl_alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantdeclarationsContext constantdeclarations() {
		ConstantdeclarationsContext _localctx = new ConstantdeclarationsContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_constantdeclarations);
		int _la;
		try {
			_localctx = new Constdecl_alt1Context(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(STATHERES);
			State = 157;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 154; Match(IDENTIFIER);
				State = 155; Match(EQUALS);
				State = 156; expressionprimitives();
				}
				}
				State = 159;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==IDENTIFIER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfcontrolContext : ParserRuleContext {
		public IfcontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifcontrol; } }
	 
		public IfcontrolContext() { }
		public virtual void CopyFrom(IfcontrolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfctrlContext : IfcontrolContext {
		public IReadOnlyList<ElseifContext> elseif() {
			return GetRuleContexts<ElseifContext>();
		}
		public ITerminalNode TOTE() { return GetToken(GLOSSAParser.TOTE, 0); }
		public ITerminalNode TELOS_AN() { return GetToken(GLOSSAParser.TELOS_AN, 0); }
		public ITerminalNode AN() { return GetToken(GLOSSAParser.AN, 0); }
		public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ElseifContext elseif(int i) {
			return GetRuleContext<ElseifContext>(i);
		}
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfctrlContext(IfcontrolContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterIfctrl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitIfctrl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfctrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfcontrolContext ifcontrol() {
		IfcontrolContext _localctx = new IfcontrolContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_ifcontrol);
		int _la;
		try {
			_localctx = new IfctrlContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(AN);
			State = 162; expression(0);
			State = 163; Match(TOTE);
			State = 167;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AN) | (1L << GRAPSE) | (1L << EKTIPOSE) | (1L << DIABASE) | (1L << KALESE) | (1L << INTEGER) | (1L << DECIMAL) | (1L << STRING) | (1L << IDENTIFIER) | (1L << LPAREN))) != 0)) {
				{
				{
				State = 164; statement();
				}
				}
				State = 169;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 173;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ALLIOS_AN) {
				{
				{
				State = 170; elseif();
				}
				}
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 177;
			_la = _input.La(1);
			if (_la==ALLIOS) {
				{
				State = 176; @else();
				}
			}

			State = 179; Match(TELOS_AN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifContext : ParserRuleContext {
		public ElseifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseif; } }
	 
		public ElseifContext() { }
		public virtual void CopyFrom(ElseifContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElseifctrlContext : ElseifContext {
		public ITerminalNode TOTE() { return GetToken(GLOSSAParser.TOTE, 0); }
		public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public ITerminalNode ALLIOS_AN() { return GetToken(GLOSSAParser.ALLIOS_AN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseifctrlContext(ElseifContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterElseifctrl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitElseifctrl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifctrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifContext elseif() {
		ElseifContext _localctx = new ElseifContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_elseif);
		try {
			_localctx = new ElseifctrlContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(ALLIOS_AN);
			State = 182; expression(0);
			State = 183; Match(TOTE);
			State = 184; statementlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
	 
		public ElseContext() { }
		public virtual void CopyFrom(ElseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElsectrlContext : ElseContext {
		public ITerminalNode ALLIOS() { return GetToken(GLOSSAParser.ALLIOS, 0); }
		public StatementlistContext statementlist() {
			return GetRuleContext<StatementlistContext>(0);
		}
		public ElsectrlContext(ElseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterElsectrl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitElsectrl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsectrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_else);
		try {
			_localctx = new ElsectrlContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(ALLIOS);
			State = 187; statementlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionargumentsContext : ParserRuleContext {
		public FunctionargumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionarguments; } }
	 
		public FunctionargumentsContext() { }
		public virtual void CopyFrom(FunctionargumentsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunargsContext : FunctionargumentsContext {
		public IReadOnlyList<ITerminalNode> COMMA() { return GetTokens(GLOSSAParser.COMMA); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GLOSSAParser.IDENTIFIER, i);
		}
		public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(GLOSSAParser.IDENTIFIER); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GLOSSAParser.COMMA, i);
		}
		public FunargsContext(FunctionargumentsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterFunargs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitFunargs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionargumentsContext functionarguments() {
		FunctionargumentsContext _localctx = new FunctionargumentsContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_functionarguments);
		int _la;
		try {
			_localctx = new FunargsContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(IDENTIFIER);
			State = 194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 190; Match(COMMA);
				State = 191; Match(IDENTIFIER);
				}
				}
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	 
		public AssignmentContext() { }
		public virtual void CopyFrom(AssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignContext : AssignmentContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(GLOSSAParser.ASSIGNMENT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(GLOSSAParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(AssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignment);
		try {
			_localctx = new AssignContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(IDENTIFIER);
			State = 198; Match(ASSIGNMENT);
			State = 199; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_compareContext : ExpressionContext {
		public IToken op;
		public ITerminalNode EQUALS() { return GetToken(GLOSSAParser.EQUALS, 0); }
		public ITerminalNode GE() { return GetToken(GLOSSAParser.GE, 0); }
		public ITerminalNode NOTEQUALS() { return GetToken(GLOSSAParser.NOTEQUALS, 0); }
		public ITerminalNode LT() { return GetToken(GLOSSAParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(GLOSSAParser.GT, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LE() { return GetToken(GLOSSAParser.LE, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public Expr_compareContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpr_compare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpr_compare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_compare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_muldivContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode DIV() { return GetToken(GLOSSAParser.DIV, 0); }
		public ITerminalNode MUL() { return GetToken(GLOSSAParser.MUL, 0); }
		public Expr_muldivContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpr_muldiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpr_muldiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_muldiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_powerContext : ExpressionContext {
		public ITerminalNode POWER() { return GetToken(GLOSSAParser.POWER, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public Expr_powerContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpr_power(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpr_power(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_power(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_parenContext : ExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(GLOSSAParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(GLOSSAParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expr_parenContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpr_paren(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpr_paren(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_paren(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_funcproccallContext : ExpressionContext {
		public FunctionargumentsContext functionarguments() {
			return GetRuleContext<FunctionargumentsContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(GLOSSAParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(GLOSSAParser.RPAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(GLOSSAParser.IDENTIFIER, 0); }
		public Expr_funcproccallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpr_funcproccall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpr_funcproccall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_funcproccall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_expressionprimitivesContext : ExpressionContext {
		public ExpressionprimitivesContext expressionprimitives() {
			return GetRuleContext<ExpressionprimitivesContext>(0);
		}
		public Expr_expressionprimitivesContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpr_expressionprimitives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpr_expressionprimitives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_expressionprimitives(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_plusminusContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(GLOSSAParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(GLOSSAParser.MINUS, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public Expr_plusminusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpr_plusminus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpr_plusminus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_plusminus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				_localctx = new Expr_parenContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 202; Match(LPAREN);
				State = 203; expression(0);
				State = 204; Match(RPAREN);
				}
				break;

			case 2:
				{
				_localctx = new Expr_funcproccallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 206; Match(IDENTIFIER);
				State = 207; Match(LPAREN);
				State = 209;
				_la = _input.La(1);
				if (_la==IDENTIFIER) {
					{
					State = 208; functionarguments();
					}
				}

				State = 211; Match(RPAREN);
				}
				break;

			case 3:
				{
				_localctx = new Expr_expressionprimitivesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 212; expressionprimitives();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 229;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 227;
					switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						_localctx = new Expr_powerContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 216; Match(POWER);
						State = 217; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new Expr_muldivContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 218;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 219;
						((Expr_muldivContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((Expr_muldivContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 220; expression(6);
						}
						break;

					case 3:
						{
						_localctx = new Expr_plusminusContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 222;
						((Expr_plusminusContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((Expr_plusminusContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 223; expression(5);
						}
						break;

					case 4:
						{
						_localctx = new Expr_compareContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 225;
						((Expr_compareContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOTEQUALS) | (1L << GT) | (1L << GE) | (1L << LT) | (1L << LE))) != 0)) ) {
							((Expr_compareContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 226; expression(4);
						}
						break;
					}
					} 
				}
				State = 231;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionprimitivesContext : ParserRuleContext {
		public ExpressionprimitivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionprimitives; } }
	 
		public ExpressionprimitivesContext() { }
		public virtual void CopyFrom(ExpressionprimitivesContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expressionprimitives_stringContext : ExpressionprimitivesContext {
		public ITerminalNode STRING() { return GetToken(GLOSSAParser.STRING, 0); }
		public Expressionprimitives_stringContext(ExpressionprimitivesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpressionprimitives_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpressionprimitives_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionprimitives_string(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expressionprimitives_intContext : ExpressionprimitivesContext {
		public ITerminalNode INTEGER() { return GetToken(GLOSSAParser.INTEGER, 0); }
		public Expressionprimitives_intContext(ExpressionprimitivesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpressionprimitives_int(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpressionprimitives_int(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionprimitives_int(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expressionprimitives_decContext : ExpressionprimitivesContext {
		public ITerminalNode DECIMAL() { return GetToken(GLOSSAParser.DECIMAL, 0); }
		public Expressionprimitives_decContext(ExpressionprimitivesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpressionprimitives_dec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpressionprimitives_dec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionprimitives_dec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expressionprimitives_identifierContext : ExpressionprimitivesContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GLOSSAParser.IDENTIFIER, 0); }
		public Expressionprimitives_identifierContext(ExpressionprimitivesContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterExpressionprimitives_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitExpressionprimitives_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionprimitives_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionprimitivesContext expressionprimitives() {
		ExpressionprimitivesContext _localctx = new ExpressionprimitivesContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_expressionprimitives);
		try {
			State = 236;
			switch (_input.La(1)) {
			case INTEGER:
				_localctx = new Expressionprimitives_intContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; Match(INTEGER);
				}
				break;
			case DECIMAL:
				_localctx = new Expressionprimitives_decContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; Match(DECIMAL);
				}
				break;
			case STRING:
				_localctx = new Expressionprimitives_stringContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 234; Match(STRING);
				}
				break;
			case IDENTIFIER:
				_localctx = new Expressionprimitives_identifierContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 235; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Type_pragmatikesContext : TypeContext {
		public ITerminalNode PRAGMATIKES() { return GetToken(GLOSSAParser.PRAGMATIKES, 0); }
		public Type_pragmatikesContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterType_pragmatikes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitType_pragmatikes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_pragmatikes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Type_xaraktiresContext : TypeContext {
		public ITerminalNode XARAKTHRES() { return GetToken(GLOSSAParser.XARAKTHRES, 0); }
		public Type_xaraktiresContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterType_xaraktires(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitType_xaraktires(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_xaraktires(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Type_akeraiesContext : TypeContext {
		public ITerminalNode AKERAIES() { return GetToken(GLOSSAParser.AKERAIES, 0); }
		public Type_akeraiesContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterType_akeraies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitType_akeraies(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_akeraies(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Type_logikesContext : TypeContext {
		public ITerminalNode LOGIKES() { return GetToken(GLOSSAParser.LOGIKES, 0); }
		public Type_logikesContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterType_logikes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitType_logikes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_logikes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_type);
		try {
			State = 242;
			switch (_input.La(1)) {
			case AKERAIES:
				_localctx = new Type_akeraiesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 238; Match(AKERAIES);
				}
				break;
			case PRAGMATIKES:
				_localctx = new Type_pragmatikesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; Match(PRAGMATIKES);
				}
				break;
			case XARAKTHRES:
				_localctx = new Type_xaraktiresContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 240; Match(XARAKTHRES);
				}
				break;
			case LOGIKES:
				_localctx = new Type_logikesContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 241; Match(LOGIKES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
	 
		public KeywordContext() { }
		public virtual void CopyFrom(KeywordContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Keyword_kaleseContext : KeywordContext {
		public ITerminalNode KALESE() { return GetToken(GLOSSAParser.KALESE, 0); }
		public Keyword_kaleseContext(KeywordContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterKeyword_kalese(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitKeyword_kalese(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_kalese(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Keyword_diabaseContext : KeywordContext {
		public ITerminalNode DIABASE() { return GetToken(GLOSSAParser.DIABASE, 0); }
		public Keyword_diabaseContext(KeywordContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterKeyword_diabase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitKeyword_diabase(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_diabase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Keyword_ektiposeContext : KeywordContext {
		public ITerminalNode EKTIPOSE() { return GetToken(GLOSSAParser.EKTIPOSE, 0); }
		public Keyword_ektiposeContext(KeywordContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterKeyword_ektipose(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitKeyword_ektipose(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_ektipose(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Keyword_grapseContext : KeywordContext {
		public ITerminalNode GRAPSE() { return GetToken(GLOSSAParser.GRAPSE, 0); }
		public Keyword_grapseContext(KeywordContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterKeyword_grapse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitKeyword_grapse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_grapse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_keyword);
		try {
			State = 248;
			switch (_input.La(1)) {
			case GRAPSE:
				_localctx = new Keyword_grapseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 244; Match(GRAPSE);
				}
				break;
			case EKTIPOSE:
				_localctx = new Keyword_ektiposeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; Match(EKTIPOSE);
				}
				break;
			case DIABASE:
				_localctx = new Keyword_diabaseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 246; Match(DIABASE);
				}
				break;
			case KALESE:
				_localctx = new Keyword_kaleseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 247; Match(KALESE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
	 
		public BoolContext() { }
		public virtual void CopyFrom(BoolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Bool_trueContext : BoolContext {
		public ITerminalNode TRUE() { return GetToken(GLOSSAParser.TRUE, 0); }
		public Bool_trueContext(BoolContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterBool_true(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitBool_true(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_true(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Bool_falseContext : BoolContext {
		public ITerminalNode FALSE() { return GetToken(GLOSSAParser.FALSE, 0); }
		public Bool_falseContext(BoolContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.EnterBool_false(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGLOSSAListener typedListener = listener as IGLOSSAListener;
			if (typedListener != null) typedListener.ExitBool_false(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGLOSSAVisitor<TResult> typedVisitor = visitor as IGLOSSAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_false(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_bool);
		try {
			State = 252;
			switch (_input.La(1)) {
			case TRUE:
				_localctx = new Bool_trueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 250; Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Bool_falseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 251; Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 6);

		case 1: return Precpred(_ctx, 5);

		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x35\x101\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2"+
		"\x3\x2\a\x2,\n\x2\f\x2\xE\x2/\v\x2\x3\x3\x3\x3\x3\x3\a\x3\x34\n\x3\f\x3"+
		"\xE\x3\x37\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\a\x4>\n\x4\f\x4\xE\x4\x41"+
		"\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5I\n\x5\x3\x5\x5\x5L\n\x5"+
		"\x3\x6\x3\x6\x5\x6P\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\aX\n\a\f\a\xE"+
		"\a[\v\a\x3\a\x5\a^\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x5\al\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\bt\n\b\f\b\xE\b"+
		"w\v\b\x3\b\x5\bz\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\x84"+
		"\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x8C\n\t\f\t\xE\t\x8F\v\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x6\t\x96\n\t\r\t\xE\t\x97\x5\t\x9A\n\t\x3\n\x3\n\x3"+
		"\n\x3\n\x6\n\xA0\n\n\r\n\xE\n\xA1\x3\v\x3\v\x3\v\x3\v\a\v\xA8\n\v\f\v"+
		"\xE\v\xAB\v\v\x3\v\a\v\xAE\n\v\f\v\xE\v\xB1\v\v\x3\v\x5\v\xB4\n\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\xC3"+
		"\n\xE\f\xE\xE\xE\xC6\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xD4\n\x10\x3\x10\x3\x10\x5"+
		"\x10\xD8\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\xE6\n\x10\f\x10\xE\x10\xE9\v\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x5\x11\xEF\n\x11\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\xF5\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\xFB\n\x13\x3\x14"+
		"\x3\x14\x5\x14\xFF\n\x14\x3\x14\x2\x2\x3\x1E\x15\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2\x2\x5\x3\x2()\x3\x2&\'\x3\x2 %\x115\x2(\x3\x2\x2"+
		"\x2\x4\x30\x3\x2\x2\x2\x6?\x3\x2\x2\x2\bK\x3\x2\x2\x2\nO\x3\x2\x2\x2\f"+
		"k\x3\x2\x2\x2\xE\x83\x3\x2\x2\x2\x10\x99\x3\x2\x2\x2\x12\x9B\x3\x2\x2"+
		"\x2\x14\xA3\x3\x2\x2\x2\x16\xB7\x3\x2\x2\x2\x18\xBC\x3\x2\x2\x2\x1A\xBF"+
		"\x3\x2\x2\x2\x1C\xC7\x3\x2\x2\x2\x1E\xD7\x3\x2\x2\x2 \xEE\x3\x2\x2\x2"+
		"\"\xF4\x3\x2\x2\x2$\xFA\x3\x2\x2\x2&\xFE\x3\x2\x2\x2(-\x5\x4\x3\x2),\x5"+
		"\f\a\x2*,\x5\xE\b\x2+)\x3\x2\x2\x2+*\x3\x2\x2\x2,/\x3\x2\x2\x2-+\x3\x2"+
		"\x2\x2-.\x3\x2\x2\x2.\x3\x3\x2\x2\x2/-\x3\x2\x2\x2\x30\x31\a\x4\x2\x2"+
		"\x31\x35\a\x1F\x2\x2\x32\x34\x5\n\x6\x2\x33\x32\x3\x2\x2\x2\x34\x37\x3"+
		"\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x38\x3\x2\x2\x2"+
		"\x37\x35\x3\x2\x2\x2\x38\x39\a\x5\x2\x2\x39:\x5\x6\x4\x2:;\a\x6\x2\x2"+
		";\x5\x3\x2\x2\x2<>\x5\b\x5\x2=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2"+
		"\x2?@\x3\x2\x2\x2@\a\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42L\x5\x1E\x10\x2\x43"+
		"L\x5\x1C\xF\x2\x44\x45\x5$\x13\x2\x45H\x5\x1E\x10\x2\x46G\a,\x2\x2GI\x5"+
		"\x1E\x10\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IL\x3\x2\x2\x2JL\x5\x14\v\x2"+
		"K\x42\x3\x2\x2\x2K\x43\x3\x2\x2\x2K\x44\x3\x2\x2\x2KJ\x3\x2\x2\x2L\t\x3"+
		"\x2\x2\x2MP\x5\x10\t\x2NP\x5\x12\n\x2OM\x3\x2\x2\x2ON\x3\x2\x2\x2P\v\x3"+
		"\x2\x2\x2QR\a\a\x2\x2R]\a\x1F\x2\x2ST\a.\x2\x2TY\a\x1F\x2\x2UV\a,\x2\x2"+
		"VX\a\x1F\x2\x2WU\x3\x2\x2\x2X[\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2"+
		"Z\\\x3\x2\x2\x2[Y\x3\x2\x2\x2\\^\a/\x2\x2]S\x3\x2\x2\x2]^\x3\x2\x2\x2"+
		"^_\x3\x2\x2\x2_`\a\x3\x2\x2`\x61\x5\"\x12\x2\x61\x62\x5\x6\x4\x2\x62\x63"+
		"\a\b\x2\x2\x63l\x3\x2\x2\x2\x64\x65\a\a\x2\x2\x65\x66\a\x1F\x2\x2\x66"+
		"g\a\x3\x2\x2gh\x5\"\x12\x2hi\x5\x6\x4\x2ij\a\b\x2\x2jl\x3\x2\x2\x2kQ\x3"+
		"\x2\x2\x2k\x64\x3\x2\x2\x2l\r\x3\x2\x2\x2mn\a\t\x2\x2ny\a\x1F\x2\x2op"+
		"\a.\x2\x2pu\a\x1F\x2\x2qr\a,\x2\x2rt\a\x1F\x2\x2sq\x3\x2\x2\x2tw\x3\x2"+
		"\x2\x2us\x3\x2\x2\x2uv\x3\x2\x2\x2vx\x3\x2\x2\x2wu\x3\x2\x2\x2xz\a/\x2"+
		"\x2yo\x3\x2\x2\x2yz\x3\x2\x2\x2z{\x3\x2\x2\x2{|\x5\x6\x4\x2|}\a\n\x2\x2"+
		"}\x84\x3\x2\x2\x2~\x7F\a\t\x2\x2\x7F\x80\a\x1F\x2\x2\x80\x81\x5\x6\x4"+
		"\x2\x81\x82\a\n\x2\x2\x82\x84\x3\x2\x2\x2\x83m\x3\x2\x2\x2\x83~\x3\x2"+
		"\x2\x2\x84\xF\x3\x2\x2\x2\x85\x86\a\v\x2\x2\x86\x87\x5\"\x12\x2\x87\x88"+
		"\a\x3\x2\x2\x88\x8D\a\x1F\x2\x2\x89\x8A\a,\x2\x2\x8A\x8C\a\x1F\x2\x2\x8B"+
		"\x89\x3\x2\x2\x2\x8C\x8F\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2"+
		"\x2\x2\x8E\x9A\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x90\x95\a\v\x2\x2\x91\x92"+
		"\x5\"\x12\x2\x92\x93\a\x3\x2\x2\x93\x94\a\x1F\x2\x2\x94\x96\x3\x2\x2\x2"+
		"\x95\x91\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3"+
		"\x2\x2\x2\x98\x9A\x3\x2\x2\x2\x99\x85\x3\x2\x2\x2\x99\x90\x3\x2\x2\x2"+
		"\x9A\x11\x3\x2\x2\x2\x9B\x9F\a\f\x2\x2\x9C\x9D\a\x1F\x2\x2\x9D\x9E\a "+
		"\x2\x2\x9E\xA0\x5 \x11\x2\x9F\x9C\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1"+
		"\x9F\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\x13\x3\x2\x2\x2\xA3\xA4\a\r\x2"+
		"\x2\xA4\xA5\x5\x1E\x10\x2\xA5\xA9\a\xE\x2\x2\xA6\xA8\x5\b\x5\x2\xA7\xA6"+
		"\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2"+
		"\x2\xAA\xAF\x3\x2\x2\x2\xAB\xA9\x3\x2\x2\x2\xAC\xAE\x5\x16\f\x2\xAD\xAC"+
		"\x3\x2\x2\x2\xAE\xB1\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2"+
		"\x2\xB0\xB3\x3\x2\x2\x2\xB1\xAF\x3\x2\x2\x2\xB2\xB4\x5\x18\r\x2\xB3\xB2"+
		"\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\a\xF\x2\x2"+
		"\xB6\x15\x3\x2\x2\x2\xB7\xB8\a\x10\x2\x2\xB8\xB9\x5\x1E\x10\x2\xB9\xBA"+
		"\a\xE\x2\x2\xBA\xBB\x5\x6\x4\x2\xBB\x17\x3\x2\x2\x2\xBC\xBD\a\x11\x2\x2"+
		"\xBD\xBE\x5\x6\x4\x2\xBE\x19\x3\x2\x2\x2\xBF\xC4\a\x1F\x2\x2\xC0\xC1\a"+
		",\x2\x2\xC1\xC3\a\x1F\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4"+
		"\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\x1B\x3\x2\x2\x2\xC6\xC4\x3\x2"+
		"\x2\x2\xC7\xC8\a\x1F\x2\x2\xC8\xC9\a-\x2\x2\xC9\xCA\x5\x1E\x10\x2\xCA"+
		"\x1D\x3\x2\x2\x2\xCB\xCC\b\x10\x1\x2\xCC\xCD\a.\x2\x2\xCD\xCE\x5\x1E\x10"+
		"\x2\xCE\xCF\a/\x2\x2\xCF\xD8\x3\x2\x2\x2\xD0\xD1\a\x1F\x2\x2\xD1\xD3\a"+
		".\x2\x2\xD2\xD4\x5\x1A\xE\x2\xD3\xD2\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4"+
		"\xD5\x3\x2\x2\x2\xD5\xD8\a/\x2\x2\xD6\xD8\x5 \x11\x2\xD7\xCB\x3\x2\x2"+
		"\x2\xD7\xD0\x3\x2\x2\x2\xD7\xD6\x3\x2\x2\x2\xD8\xE7\x3\x2\x2\x2\xD9\xDA"+
		"\f\b\x2\x2\xDA\xDB\a*\x2\x2\xDB\xE6\x5\x1E\x10\b\xDC\xDD\f\a\x2\x2\xDD"+
		"\xDE\t\x2\x2\x2\xDE\xE6\x5\x1E\x10\b\xDF\xE0\f\x6\x2\x2\xE0\xE1\t\x3\x2"+
		"\x2\xE1\xE6\x5\x1E\x10\a\xE2\xE3\f\x5\x2\x2\xE3\xE4\t\x4\x2\x2\xE4\xE6"+
		"\x5\x1E\x10\x6\xE5\xD9\x3\x2\x2\x2\xE5\xDC\x3\x2\x2\x2\xE5\xDF\x3\x2\x2"+
		"\x2\xE5\xE2\x3\x2\x2\x2\xE6\xE9\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8"+
		"\x3\x2\x2\x2\xE8\x1F\x3\x2\x2\x2\xE9\xE7\x3\x2\x2\x2\xEA\xEF\a\x1C\x2"+
		"\x2\xEB\xEF\a\x1D\x2\x2\xEC\xEF\a\x1E\x2\x2\xED\xEF\a\x1F\x2\x2\xEE\xEA"+
		"\x3\x2\x2\x2\xEE\xEB\x3\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEE\xED\x3\x2\x2"+
		"\x2\xEF!\x3\x2\x2\x2\xF0\xF5\a\x12\x2\x2\xF1\xF5\a\x13\x2\x2\xF2\xF5\a"+
		"\x14\x2\x2\xF3\xF5\a\x15\x2\x2\xF4\xF0\x3\x2\x2\x2\xF4\xF1\x3\x2\x2\x2"+
		"\xF4\xF2\x3\x2\x2\x2\xF4\xF3\x3\x2\x2\x2\xF5#\x3\x2\x2\x2\xF6\xFB\a\x16"+
		"\x2\x2\xF7\xFB\a\x17\x2\x2\xF8\xFB\a\x18\x2\x2\xF9\xFB\a\x19\x2\x2\xFA"+
		"\xF6\x3\x2\x2\x2\xFA\xF7\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xF9\x3\x2"+
		"\x2\x2\xFB%\x3\x2\x2\x2\xFC\xFF\a\x1A\x2\x2\xFD\xFF\a\x1B\x2\x2\xFE\xFC"+
		"\x3\x2\x2\x2\xFE\xFD\x3\x2\x2\x2\xFF\'\x3\x2\x2\x2\x1F+-\x35?HKOY]kuy"+
		"\x83\x8D\x97\x99\xA1\xA9\xAF\xB3\xC4\xD3\xD7\xE5\xE7\xEE\xF4\xFA\xFE";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Glossa
