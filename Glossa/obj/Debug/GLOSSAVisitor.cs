//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.4.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Sonic\Documents\Visual Studio 2013\Projects\Glossa\Glossa\GLOSSA.g4 by ANTLR 4.4.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Glossa {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GLOSSAParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.4.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public interface IGLOSSAVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>whilectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.whileLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhilectrl([NotNull] GLOSSAParser.WhilectrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stmtlist</c>
	/// labeled alternative in <see cref="GLOSSAParser.statementlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStmtlist([NotNull] GLOSSAParser.StmtlistContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>bool_true</c>
	/// labeled alternative in <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBool_true([NotNull] GLOSSAParser.Bool_trueContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>bool_false</c>
	/// labeled alternative in <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBool_false([NotNull] GLOSSAParser.Bool_falseContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>switchctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.switchcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchctrl([NotNull] GLOSSAParser.SwitchctrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>programstart</c>
	/// labeled alternative in <see cref="GLOSSAParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgramstart([NotNull] GLOSSAParser.ProgramstartContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>casectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.casescontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCasectrl([NotNull] GLOSSAParser.CasectrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>type_pragmatikes</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType_pragmatikes([NotNull] GLOSSAParser.Type_pragmatikesContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>type_xaraktires</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType_xaraktires([NotNull] GLOSSAParser.Type_xaraktiresContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>type_akeraies</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType_akeraies([NotNull] GLOSSAParser.Type_akeraiesContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>type_logikes</c>
	/// labeled alternative in <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType_logikes([NotNull] GLOSSAParser.Type_logikesContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>filestart</c>
	/// labeled alternative in <see cref="GLOSSAParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFilestart([NotNull] GLOSSAParser.FilestartContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>elsectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElsectrl([NotNull] GLOSSAParser.ElsectrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>elseifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.elseif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseifctrl([NotNull] GLOSSAParser.ElseifctrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stat_ifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStat_ifctrl([NotNull] GLOSSAParser.Stat_ifctrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stat_ioexpr</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStat_ioexpr([NotNull] GLOSSAParser.Stat_ioexprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stat_assignment</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStat_assignment([NotNull] GLOSSAParser.Stat_assignmentContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>stat_expr</c>
	/// labeled alternative in <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStat_expr([NotNull] GLOSSAParser.Stat_exprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>keyword_kalese</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyword_kalese([NotNull] GLOSSAParser.Keyword_kaleseContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>keyword_diabase</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyword_diabase([NotNull] GLOSSAParser.Keyword_diabaseContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>keyword_ektipose</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyword_ektipose([NotNull] GLOSSAParser.Keyword_ektiposeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>keyword_grapse</c>
	/// labeled alternative in <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyword_grapse([NotNull] GLOSSAParser.Keyword_grapseContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>vardecl_alt2</c>
	/// labeled alternative in <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVardecl_alt2([NotNull] GLOSSAParser.Vardecl_alt2Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>vardecl_alt1</c>
	/// labeled alternative in <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVardecl_alt1([NotNull] GLOSSAParser.Vardecl_alt1Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>procdef1</c>
	/// labeled alternative in <see cref="GLOSSAParser.proceduredefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcdef1([NotNull] GLOSSAParser.Procdef1Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>procdef2</c>
	/// labeled alternative in <see cref="GLOSSAParser.proceduredefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcdef2([NotNull] GLOSSAParser.Procdef2Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>ifctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.ifcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfctrl([NotNull] GLOSSAParser.IfctrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expr_compare</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_compare([NotNull] GLOSSAParser.Expr_compareContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expr_muldiv</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_muldiv([NotNull] GLOSSAParser.Expr_muldivContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expr_power</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_power([NotNull] GLOSSAParser.Expr_powerContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expr_paren</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_paren([NotNull] GLOSSAParser.Expr_parenContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expr_funcproccall</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_funcproccall([NotNull] GLOSSAParser.Expr_funcproccallContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expr_expressionprimitives</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_expressionprimitives([NotNull] GLOSSAParser.Expr_expressionprimitivesContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expr_plusminus</c>
	/// labeled alternative in <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr_plusminus([NotNull] GLOSSAParser.Expr_plusminusContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>otherwisectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.otherwisecontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOtherwisectrl([NotNull] GLOSSAParser.OtherwisectrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>assign</c>
	/// labeled alternative in <see cref="GLOSSAParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssign([NotNull] GLOSSAParser.AssignContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>constdecl</c>
	/// labeled alternative in <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstdecl([NotNull] GLOSSAParser.ConstdeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>vardecl</c>
	/// labeled alternative in <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVardecl([NotNull] GLOSSAParser.VardeclContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>dowhilectrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.dowhileLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDowhilectrl([NotNull] GLOSSAParser.DowhilectrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>constdecl_alt1</c>
	/// labeled alternative in <see cref="GLOSSAParser.constantdeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstdecl_alt1([NotNull] GLOSSAParser.Constdecl_alt1Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>funcdef1</c>
	/// labeled alternative in <see cref="GLOSSAParser.functiondefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncdef1([NotNull] GLOSSAParser.Funcdef1Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>funcdef2</c>
	/// labeled alternative in <see cref="GLOSSAParser.functiondefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFuncdef2([NotNull] GLOSSAParser.Funcdef2Context context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expressionprimitives_string</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionprimitives_string([NotNull] GLOSSAParser.Expressionprimitives_stringContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expressionprimitives_int</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionprimitives_int([NotNull] GLOSSAParser.Expressionprimitives_intContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expressionprimitives_dec</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionprimitives_dec([NotNull] GLOSSAParser.Expressionprimitives_decContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>expressionprimitives_identifier</c>
	/// labeled alternative in <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionprimitives_identifier([NotNull] GLOSSAParser.Expressionprimitives_identifierContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>forctrl</c>
	/// labeled alternative in <see cref="GLOSSAParser.forloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForctrl([NotNull] GLOSSAParser.ForctrlContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>funargs</c>
	/// labeled alternative in <see cref="GLOSSAParser.functionarguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunargs([NotNull] GLOSSAParser.FunargsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.file"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFile([NotNull] GLOSSAParser.FileContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] GLOSSAParser.ProgramContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.statementlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementlist([NotNull] GLOSSAParser.StatementlistContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] GLOSSAParser.StatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.declarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclarations([NotNull] GLOSSAParser.DeclarationsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.functiondefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctiondefinition([NotNull] GLOSSAParser.FunctiondefinitionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.proceduredefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProceduredefinition([NotNull] GLOSSAParser.ProceduredefinitionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.variabledeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariabledeclarations([NotNull] GLOSSAParser.VariabledeclarationsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.constantdeclarations"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantdeclarations([NotNull] GLOSSAParser.ConstantdeclarationsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.ifcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfcontrol([NotNull] GLOSSAParser.IfcontrolContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.elseif"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseif([NotNull] GLOSSAParser.ElseifContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.else"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElse([NotNull] GLOSSAParser.ElseContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.dowhileLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDowhileLoop([NotNull] GLOSSAParser.DowhileLoopContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.whileLoop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileLoop([NotNull] GLOSSAParser.WhileLoopContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.forloop"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForloop([NotNull] GLOSSAParser.ForloopContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.switchcontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchcontrol([NotNull] GLOSSAParser.SwitchcontrolContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.casescontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCasescontrol([NotNull] GLOSSAParser.CasescontrolContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.otherwisecontrol"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOtherwisecontrol([NotNull] GLOSSAParser.OtherwisecontrolContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.functionarguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionarguments([NotNull] GLOSSAParser.FunctionargumentsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] GLOSSAParser.AssignmentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] GLOSSAParser.ExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.expressionprimitives"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionprimitives([NotNull] GLOSSAParser.ExpressionprimitivesContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] GLOSSAParser.TypeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.keyword"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitKeyword([NotNull] GLOSSAParser.KeywordContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GLOSSAParser.bool"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBool([NotNull] GLOSSAParser.BoolContext context);
}
} // namespace Glossa
